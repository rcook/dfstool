use crate::address::Address;
use std::collections::HashMap;
use std::sync::LazyLock;

pub static BBC_BASIC_2_EXECUTION_ADDRESS: LazyLock<Address> =
    LazyLock::new(|| 0x38023.try_into().expect("Must be valid"));

pub const END_MARKER: [u8; 2] = [0x0d, 0xff];

// https://xania.org/200711/bbc-basic-v-format
// https://xania.org/200711/BBCBasicToText.py
// https://www.bbcbasic.net/wiki/doku.php?id=detokeniser
pub const KEYWORDS: [&str; 129] = [
    "OTHERWISE",
    "AND",
    "DIV",
    "EOR",
    "MOD",
    "OR",
    "ERROR",
    "LINE",
    "OFF",
    "STEP",
    "SPC",
    "TAB(",
    "ELSE",
    "THEN",
    "<line>",
    "OPENIN",
    "PTR",
    "PAGE",
    "TIME",
    "LOMEM",
    "HIMEM",
    "ABS",
    "ACS",
    "ADVAL",
    "ASC",
    "ASN",
    "ATN",
    "BGET",
    "COS",
    "COUNT",
    "DEG",
    "ERL",
    "ERR",
    "EVAL",
    "EXP",
    "EXT",
    "FALSE",
    "FN",
    "GET",
    "INKEY",
    "INSTR(",
    "INT",
    "LEN",
    "LN",
    "LOG",
    "NOT",
    "OPENUP",
    "OPENOUT",
    "PI",
    "POINT(",
    "POS",
    "RAD",
    "RND",
    "SGN",
    "SIN",
    "SQR",
    "TAN",
    "TO",
    "TRUE",
    "USR",
    "VAL",
    "VPOS",
    "CHR$",
    "GET$",
    "INKEY$",
    "LEFT$(",
    "MID$(",
    "RIGHT$(",
    "STR$",
    "STRING$(",
    "EOF",
    "<ESCFN>",
    "<ESCCOM>",
    "<ESCSTMT>",
    "WHEN",
    "OF",
    "ENDCASE",
    "ELSE",
    "ENDIF",
    "ENDWHILE",
    "PTR",
    "PAGE",
    "TIME",
    "LOMEM",
    "HIMEM",
    "SOUND",
    "BPUT",
    "CALL",
    "CHAIN",
    "CLEAR",
    "CLOSE",
    "CLG",
    "CLS",
    "DATA",
    "DEF",
    "DIM",
    "DRAW",
    "END",
    "ENDPROC",
    "ENVELOPE",
    "FOR",
    "GOSUB",
    "GOTO",
    "GCOL",
    "IF",
    "INPUT",
    "LET",
    "LOCAL",
    "MODE",
    "MOVE",
    "NEXT",
    "ON",
    "VDU",
    "PLOT",
    "PRINT",
    "PROC",
    "READ",
    "REM",
    "REPEAT",
    "REPORT",
    "RESTORE",
    "RETURN",
    "RUN",
    "STOP",
    "COLOUR",
    "TRACE",
    "UNTIL",
    "WIDTH",
    "OSCLI",
];

pub const KEYWORD_TOKEN_OFFSET: usize = 0x7f;

pub static KEYWORD_MAP: LazyLock<HashMap<&str, u8>> = LazyLock::new(|| {
    KEYWORDS
        .iter()
        .enumerate()
        .map(|(index, &keyword)| (keyword, (index + KEYWORD_TOKEN_OFFSET) as u8))
        .collect()
});
