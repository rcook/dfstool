use crate::bbc_basic::KEYWORDS_BY_TOKEN;
use anyhow::{Result, bail};
use std::io::Write;

macro_rules! vec_next {
    ($bytes: expr, $index: expr) => {{
        let Some(value) = $bytes.get($index) else {
            anyhow::bail!("end of file")
        };
        $index += 1;
        *value
    }};
}

macro_rules! iter_next {
    ($iter: expr) => {{
        let Some(value) = $iter.next() else {
            anyhow::bail!("end of file")
        };
        *value
    }};
}

pub fn detokenize_source<W: Write>(mut writer: W, bytes: &[u8]) -> Result<()> {
    let mut index = 0;
    while index < bytes.len() {
        let b0 = vec_next!(bytes, index);
        if b0 != 13 {
            bail!("syntax error")
        }

        let b0 = vec_next!(bytes, index);
        if b0 == 0xff {
            break;
        }

        let b1 = vec_next!(bytes, index);
        let line_number = ((b0 as u16) << 8) + b1 as u16;
        let line_len = vec_next!(bytes, index);
        let last = index + line_len as usize - 4;
        detokenize_line(&mut writer, line_number, &bytes[index..last])?;
        index = last;
    }

    Ok(())
}

fn detokenize_line<W: Write>(mut writer: W, line_number: u16, bytes: &[u8]) -> Result<()> {
    write!(writer, "{line_number:>5}")?;
    let mut iter = bytes.iter();
    while let Some(b) = iter.next() {
        match b {
            0x8d => {
                // https://xania.org/200711/bbc-basic-line-number-format
                let b0 = iter_next!(iter);
                let b1 = iter_next!(iter);
                let b2 = iter_next!(iter);
                let line_number = decode_line_number(b0, b1, b2);
                write!(writer, "{line_number}")?;
            }
            value if (value & 0x80) != 0 => {
                let Some(keyword) = KEYWORDS_BY_TOKEN.get(value) else {
                    bail!("unknown token 0x{value:02x}")
                };
                write!(writer, "{keyword}")?
            }
            value => {
                if value.is_ascii_control() {
                    write!(writer, "[{value:02X}]")?
                } else {
                    write!(writer, "{c}", c = *value as char)?
                }
            }
        }
    }
    writeln!(writer)?;
    Ok(())
}

fn decode_line_number(b0: u8, b1: u8, b2: u8) -> u16 {
    let t0 = b0 ^ 0x54;
    let ll = (t0 & 0b00110000) >> 4;
    let hh = (t0 & 0b00001100) >> 2;

    let t1 = b1 & 0b00111111;
    let lo = t1 + (ll << 6);

    let t2 = b2 & 0b00111111;
    let hi = t2 + (hh << 6);

    ((hi as u16) << 8) + lo as u16
}

#[cfg(test)]
mod tests {
    use crate::bbc_basic::detokenize_source;
    use anyhow::Result;
    use rstest::rstest;
    use std::io::Cursor;

    const PROG1: [u8; 128] = [
        0x0d, 0x00, 0x0a, 0x07, 0xeb, 0x20, 0x37, 0x0d, 0x00, 0x14, 0x0f, 0xde, 0x20, 0x63, 0x6f,
        0x64, 0x65, 0x25, 0x20, 0x32, 0x35, 0x36, 0x0d, 0x00, 0x1e, 0x16, 0xe3, 0x20, 0x6f, 0x70,
        0x74, 0x25, 0x20, 0x3d, 0x20, 0x30, 0x20, 0xb8, 0x20, 0x32, 0x20, 0x88, 0x20, 0x32, 0x0d,
        0x00, 0x28, 0x0e, 0x50, 0x25, 0x20, 0x3d, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x25, 0x0d, 0x00,
        0x32, 0x0d, 0x5b, 0x4f, 0x50, 0x54, 0x20, 0x6f, 0x70, 0x74, 0x25, 0x0d, 0x00, 0x3c, 0x0c,
        0x20, 0x4c, 0x44, 0x41, 0x20, 0x23, 0x36, 0x35, 0x0d, 0x00, 0x46, 0x0e, 0x20, 0x4a, 0x53,
        0x52, 0x20, 0x26, 0x46, 0x46, 0x45, 0x45, 0x0d, 0x00, 0x50, 0x08, 0x20, 0x52, 0x54, 0x53,
        0x0d, 0x00, 0x5a, 0x05, 0x5d, 0x0d, 0x00, 0x64, 0x05, 0xed, 0x0d, 0x00, 0x6e, 0x0b, 0xd6,
        0x20, 0x63, 0x6f, 0x64, 0x65, 0x25, 0x0d, 0xff,
    ];

    const PROG1_STR: &str = r#"   10MODE 7
   20DIM code% 256
   30FOR opt% = 0 TO 2 STEP 2
   40P% = code%
   50[OPT opt%
   60 LDA #65
   70 JSR &FFEE
   80 RTS
   90]
  100NEXT
  110CALL code%
"#;

    const PROG2: [u8; 202] = [
        0x0d, 0x00, 0x0a, 0x07, 0xeb, 0x20, 0x37, 0x0d, 0x00, 0x14, 0x11, 0xf1, 0x20, 0x8a, 0x35,
        0x29, 0x20, 0x22, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x22, 0x0d, 0x00, 0x1e, 0x0a, 0xe4, 0x20,
        0x8d, 0x74, 0x4c, 0x40, 0x0d, 0x00, 0x28, 0x0a, 0xe5, 0x20, 0x8d, 0x54, 0x7c, 0x40, 0x0d,
        0x00, 0x32, 0x11, 0xf1, 0x20, 0x22, 0x53, 0x4b, 0x49, 0x50, 0x20, 0x54, 0x48, 0x49, 0x53,
        0x22, 0x0d, 0x00, 0x3c, 0x10, 0xe3, 0x20, 0x61, 0x25, 0x20, 0x3d, 0x20, 0x30, 0x20, 0xb8,
        0x20, 0x34, 0x0d, 0x00, 0x46, 0x1a, 0xe7, 0x20, 0x61, 0x25, 0x20, 0x3d, 0x20, 0x30, 0x20,
        0x8c, 0x20, 0x8d, 0x44, 0x50, 0x40, 0x20, 0x8b, 0x20, 0x8d, 0x44, 0x64, 0x40, 0x0d, 0x00,
        0x50, 0x12, 0xf1, 0x20, 0x22, 0x61, 0x25, 0x20, 0x69, 0x73, 0x20, 0x7a, 0x65, 0x72, 0x6f,
        0x22, 0x0d, 0x00, 0x5a, 0x0a, 0xe5, 0x20, 0x8d, 0x44, 0x6e, 0x40, 0x0d, 0x00, 0x64, 0x15,
        0xf1, 0x20, 0x22, 0x61, 0x25, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x6e, 0x7a, 0x65, 0x72,
        0x6f, 0x22, 0x0d, 0x00, 0x6e, 0x0d, 0xf1, 0x20, 0x22, 0x45, 0x4e, 0x44, 0x49, 0x46, 0x22,
        0x0d, 0x00, 0x78, 0x05, 0xed, 0x0d, 0x00, 0x82, 0x05, 0xe0, 0x0d, 0x00, 0x8c, 0x14, 0xf1,
        0x20, 0x22, 0x41, 0x20, 0x53, 0x55, 0x42, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x22,
        0x0d, 0x00, 0x96, 0x05, 0xf8, 0x0d, 0xff,
    ];

    const PROG2_STR: &str = r#"   10MODE 7
   20PRINT TAB(5) "HELLO"
   30GOSUB 140
   40GOTO 60
   50PRINT "SKIP THIS"
   60FOR a% = 0 TO 4
   70IF a% = 0 THEN 80 ELSE 100
   80PRINT "a% is zero"
   90GOTO 110
  100PRINT "a% is nonzero"
  110PRINT "ENDIF"
  120NEXT
  130END
  140PRINT "A SUBROUTINE"
  150RETURN
"#;

    #[rstest]
    #[case(PROG1_STR, &PROG1)]
    #[case(PROG2_STR, &PROG2)]
    fn basics(#[case] expected_output: &str, #[case] input: &[u8]) -> Result<()> {
        let mut bytes = Vec::new();
        detokenize_source(Cursor::new(&mut bytes), input)?;
        let s = String::from_utf8(bytes)?;
        assert_eq!(expected_output, s);
        Ok(())
    }
}
